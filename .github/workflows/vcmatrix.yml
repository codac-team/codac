on:
    push:
        branches: 'master'
        tags: '' # Restrict to blank tags
    pull_request:

jobs:
 vcmatrix:
    runs-on: ${{ matrix.cfg.os }}
    defaults:
        run:
            shell: ${{ matrix.cfg.shell }}
    strategy:
        matrix:
            cfg:
            # Change with_python: OFF when pyibex becomes available...
            - { os: windows-2019, shell: cmd, arch: x86, runtime: vc16, cmake_params: '-G "Visual Studio 16" -A Win32', choco_flags: '--x86', cpcfg: '-win32', py_v_maj: 3, py_v_min: 9, with_python: OFF, with_cpp_bundle: ON, desc: 'Windows Visual Studio 2019 x86 C++ Python 3.9' }
            # Uncomment when pyibex becomes available...
#            - { os: windows-2019, shell: cmd, arch: x86, runtime: vc16, cmake_params: '-G "Visual Studio 16" -A Win32', choco_flags: '--x86', cpcfg: '-win32', py_v_maj: 3, py_v_min: 8, with_python: OFF, desc: 'Windows Visual Studio 2019 x86 Python 3.8' }
            - { os: windows-2019, shell: cmd, arch: x64, runtime: vc16, cmake_params: '-G "Visual Studio 16" -A x64', cpcfg: '-win_amd64', py_v_maj: 3, py_v_min: 9, with_python: ON, with_cpp_bundle: ON, desc: 'Windows Visual Studio 2019 x64 C++ Python 3.9' }
            - { os: windows-2019, shell: cmd, arch: x64, runtime: vc16, cmake_params: '-G "Visual Studio 16" -A x64', cpcfg: '-win_amd64', py_v_maj: 3, py_v_min: 8, with_python: ON, desc: 'Windows Visual Studio 2019 x64 Python 3.8' }
            - { os: windows-2016, shell: cmd, arch: x86, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A Win32', choco_flags: '--x86', with_cpp_bundle: ON, desc: 'Windows Visual Studio 2017 x86 C++' }
            - { os: windows-2016, shell: cmd, arch: x64, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A x64', with_cpp_bundle: ON, desc: 'Windows Visual Studio 2017 x64 C++' }
            # Temporary fix due to current Visual Studio 2015 installation problem : changed os: windows-2019, runtime: vc14, cmake_params: '-G "Visual Studio 14" -A Win32', with_cpp_bundle: ON and removed choco_vs_tools: 'vcbuildtools' in all the cfg below so Visual Studio 2017 is currently used instead of 2015...
            # Change with_python: OFF when pyibex becomes available...
            - { os: windows-2016, shell: cmd, arch: x86, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A Win32', choco_flags: '--x86', cpcfg: 'm-win32', py_v_maj: 3, py_v_min: 7, with_python: OFF, with_cpp_bundle: OFF, desc: 'Windows Visual Studio 2017 x86 C++ Python 3.7' }
            - { os: windows-2016, shell: cmd, arch: x86, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A Win32', choco_flags: '--x86', cpcfg: 'm-win32', py_v_maj: 3, py_v_min: 6, with_python: ON, desc: 'Windows Visual Studio 2017 x86 Python 3.6' }
            - { os: windows-2016, shell: cmd, arch: x86, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A Win32', choco_flags: '--x86', cpcfg: 'm-win32', py_v_maj: 3, py_v_min: 5, with_python: ON, desc: 'Windows Visual Studio 2017 x86 Python 3.5' }
            # Should be Visual Studio 2010 for Python 3.4...?
            - { os: windows-2016, shell: cmd, arch: x86, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A Win32', choco_flags: '--x86', cpcfg: 'm-win32', py_v_maj: 3, py_v_min: 4, with_python: ON, desc: 'Windows Visual Studio 2017 x86 Python 3.4' }
            - { os: windows-2016, shell: cmd, arch: x64, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A x64', cpcfg: 'm-win_amd64', py_v_maj: 3, py_v_min: 7, with_python: ON, with_cpp_bundle: OFF, desc: 'Windows Visual Studio 2017 x64 C++ Python 3.7' }
            - { os: windows-2016, shell: cmd, arch: x64, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A x64', cpcfg: 'm-win_amd64', py_v_maj: 3, py_v_min: 6, with_python: ON, desc: 'Windows Visual Studio 2017 x64 Python 3.6' }
            - { os: windows-2016, shell: cmd, arch: x64, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A x64', cpcfg: 'm-win_amd64', py_v_maj: 3, py_v_min: 5, with_python: ON, desc: 'Windows Visual Studio 2017 x64 Python 3.5' }
            # Should be Visual Studio 2010 for Python 3.4...?
            - { os: windows-2016, shell: cmd, arch: x64, runtime: vc15, cmake_params: '-G "Visual Studio 15" -A x64', cpcfg: 'm-win_amd64', py_v_maj: 3, py_v_min: 4, with_python: ON, desc: 'Windows Visual Studio 2017 x64 Python 3.4' }
    name: ${{ matrix.cfg.desc }}
    steps: 
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
        clean: false
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.cfg.py_v_maj }}.${{ matrix.cfg.py_v_min }}
        architecture: ${{ matrix.cfg.arch }}
      if: matrix.cfg.py_v_maj!=''
    - run: |
        python -c "import sys; print(sys.version)"
        echo ${{ matrix.cfg.py_v_maj }}.${{ matrix.cfg.py_v_min }}
      if: matrix.cfg.py_v_maj!=''
    - run: |
        (New-Object System.Net.WebClient).DownloadFile("http://www.ensta-bretagne.fr/lebars/Share/windows_extra_tools.zip", "C:\Windows\Temp\windows_extra_tools.zip") 
        7z x C:\Windows\Temp\windows_extra_tools.zip -o"C:\Windows" -y
      shell: pwsh
      if: runner.os == 'Windows'
    - run: choco install -y -r --no-progress vcbuildtools -ia "/InstallSelectableItems Win81SDK_CppBuildSKUV1;VisualCppBuildTools_ATLMFC_SDK" winflexbison
      if: matrix.cfg.choco_vs_tools=='vcbuildtools'
    - run: choco install -y -r --no-progress ${{ matrix.cfg.choco_vs_tools }} winflexbison
      if: startsWith(matrix.cfg.runtime, 'vc') && matrix.cfg.choco_vs_tools!='vcbuildtools'
    - run: choco install -y -r --no-progress eigen --version=3.3.4.20210818 ${{ matrix.cfg.choco_flags }}
      shell: cmd
      if: runner.os == 'Windows'
    - run: choco install -y -r --no-progress doxygen.install graphviz & python -m pip install --upgrade pip==19.1.1 & pip install --upgrade pyIbex & pip install --upgrade wheel setuptools
      if: runner.os == 'Windows' && matrix.cfg.py_v_maj=='3' && matrix.cfg.py_v_min=='4'
    - run: choco install -y -r --no-progress doxygen.install graphviz & python -m pip install --upgrade pip & pip install --upgrade pyIbex & pip install --upgrade wheel setuptools & git clone -b v3.1.1 https://github.com/sphinx-doc/sphinx & cd sphinx & pip install . & pip install --upgrade breathe sphinx-issues sphinx-tabs sphinx_rtd_theme
      if: runner.os == 'Windows' && (matrix.cfg.py_v_maj!='3' || matrix.cfg.py_v_min!='4')
    - run: git clone https://github.com/ibex-team/ibex-lib.git ; cd ibex-lib ; mkdir build ; cd build ; cmake -E env CXXFLAGS=" /wd4267 /wd4244 /wd4305 /wd4996" CFLAGS=" /wd4267 /wd4244 /wd4305 /wd4996" cmake ${{ matrix.cfg.cmake_params }} -D CMAKE_INSTALL_PREFIX="../../ibex" .. ; cmake --build . --config Release --target install ; cd ../..
      shell: bash
    - run: |
        mkdir build ; cd build
        cmake -E env CXXFLAGS=" /wd4267 /wd4244 /wd4305 /wd4996" CFLAGS=" /wd4267 /wd4244 /wd4305 /wd4996" cmake ${{ matrix.cfg.cmake_params }} -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" -D WITH_PYTHON=${{ matrix.cfg.with_python }} ..
        if [ "${{ matrix.cfg.with_python }}" = "ON" ]; then cmake --build . --config Debug --target api ; fi
        if [ "${{ matrix.cfg.with_python }}" = "ON" ]; then cmake -E env CXXFLAGS=" /wd4267 /wd4244 /wd4305 /wd4996" CFLAGS=" /wd4267 /wd4244 /wd4305 /wd4996" cmake ${{ matrix.cfg.cmake_params }} -D CMAKE_PREFIX_PATH="ibex" -D CMAKE_INSTALL_PREFIX="../codac" -D WITH_PYTHON=${{ matrix.cfg.with_python }} .. ; fi
        cmake --build . --config Debug --target install
        if [ "${{ matrix.cfg.with_python }}" = "ON" ]; then cmake --build . --config Debug --target pip_package ; cp `ls *.whl` ../`ls *.whl | sed "s/py3-none-any/cp${{ matrix.cfg.py_v_maj }}${{ matrix.cfg.py_v_min }}-cp${{ matrix.cfg.py_v_maj }}${{ matrix.cfg.py_v_min }}${{ matrix.cfg.cpcfg }}/"` ; pip install ../*.whl ; python -c "import sys; print(sys.version)" ; python ../examples/tuto/01_getting_started/01_getting_started.py ; fi
        cd ..
      shell: bash
    - run: |
        wget http://www.ensta-bretagne.fr/lebars/Share/codac_test_win.zip --no-check-certificate -nv
        7z x codac_test_win.zip -y ; rm -Rf codac_test_win.zip ; cd codac_test_win ; if [ -d ../ibex ]; then rm -Rf ibex ; cp -Rf ../ibex . ; fi ; rm -Rf codac ; cp -Rf ../codac . ; rm -Rf ReadMe.txt ; cp -Rf ../tests/test_codac/* ./test ; cd .. ; 7z a -y codac_test_${{ matrix.cfg.arch }}_${{ matrix.cfg.runtime }}.zip codac_test_win ; cd codac_test_win/test
        cmake ${{ matrix.cfg.cmake_params }} .
        cmake --build . --config Release
        ./Release/my_project.exe
        cd ../..
      shell: bash
      if: ${{ matrix.cfg.with_cpp_bundle }}==ON
    - uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "*.zip;*.whl"
        overwrite: true
        tag_name: autotagname-${{ github.sha }}
      if: github.event_name != 'pull_request'
